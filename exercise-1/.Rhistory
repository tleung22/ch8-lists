# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long(swag, swagometer)
is_twice_as_long <- function(a, b) {
if (nchar(a) > nchar(b)) {
nchar(a) >= 2 * nchar(b)
} else if (nchar(a) < nchar(b)) {
nchar(b) >= 2 * nchar(a)
}
FALSE
}
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long(swag, swagometer)
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long("swag", "swagometer")
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long("swag", "swagometer")
is_twice_as_long <- function(a, b) {
if (nchar(a) > nchar(b)) {
longer <- nchar(a) >= 2 * nchar(b)
} else if (nchar(a) < nchar(b)) {
longer <- nchar(b) >= 2 * nchar(a)
} else {
longer <- FALSE
}
return (longer)
}
# Call your `is_twice_as_long` function by passing it different length strings
# to confirm that it works. Make sure to check when _either_ argument is twice
# as long, as well as when neither are!
is_twice_as_long("swag", "swagometer")
is_twice_as_long("sweg", "swe")
is_twice_as_long("swag", "sweg")
is_twice_as_long("sweg", "swegswog")
print?
}
?print
describe_difference <- function(a, b) {
if (nchar(a) > nchar(b)) {
result <- paste("Your first string is longer by", nchar(a) - nchar(b), "characters")
} else if (nchar(a) < nchar(b)) {
result <- paste("Your second string is longer by", nchar(b) - nchar(a), "characters")
} else {
result <- "Your strings are the same length!"
}
return (result)
}
describe_difference(swag, sweg)
describe_difference(sweg, sweeg)
describe_difference(swegggg, sweg)
describe_difference("swag", "sweg")
describe_difference("sweg", "sweeg")
describe_difference("swegggg", "sweg")
# Exercise 3: vector practice
install.packages("styler")
install.packages("lintr")
setwd("~/Desktop/INFO_201/ch8-lists/exercise-1")
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("bagel")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
mr_lunch <- c("pasta", "chicken")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
my_dinner <- c("salad", "sandwich")
meals$dinner <- my_dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1, 2]
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("bagel")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
mr_lunch <- c("pasta", "chicken")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("pasta", "chicken")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
my_dinner <- c("salad", "sandwich")
meals$dinner <- my_dinner
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1, 2]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["breakfast", "lunch"]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["breakfast":"lunch"]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c("sweg", "swag", "swog", "swig", "swug", "swyg")
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste("'", words, "'", "is the word of the day!")
seahawks <- c(9, 12, 27, 46)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
opponents <- c(17, 9, 33, 18)
# Combine your two vectors into a dataframe called `games`
games <- data.frame(seahawks, opponents)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- abs(seahawks - opponents)
games
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- diff > 0
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
games <- data.frame(seahawks, opponents)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- games$seahawks - games$opponents
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- diff > 0
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
games
